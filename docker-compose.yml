version: '3.8'

services:
  # Main API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_ORG=${GITHUB_ORG}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REDIS_URL=${REDIS_URL}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Slack Bot Service
  slack-bot:
    build:
      context: .
      dockerfile: Dockerfile.slack
    environment:
      - NODE_ENV=production
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_WORKSPACE=${SLACK_WORKSPACE}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      # Slack channel IDs
      - SLACK_CHANNEL_GENERAL=${SLACK_CHANNEL_GENERAL}
      - SLACK_CHANNEL_ANNOUNCEMENTS=${SLACK_CHANNEL_ANNOUNCEMENTS}
      - SLACK_CHANNEL_STANDUP=${SLACK_CHANNEL_STANDUP}
      - SLACK_CHANNEL_CODEHELP=${SLACK_CHANNEL_CODEHELP}
      - SLACK_CHANNEL_JOBS=${SLACK_CHANNEL_JOBS}
      - SLACK_CHANNEL_RESOURCES=${SLACK_CHANNEL_RESOURCES}
      - SLACK_CHANNEL_WINS=${SLACK_CHANNEL_WINS}
      - SLACK_CHANNEL_MENTORS=${SLACK_CHANNEL_MENTORS}
      - SLACK_CHANNEL_PAIR=${SLACK_CHANNEL_PAIR}
      - SLACK_CHANNEL_ADMIN=${SLACK_CHANNEL_ADMIN}
    depends_on:
      - redis
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Slack bot health check')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n for workflow automation (optional)
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USERNAME:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - GENERIC_TIMEZONE=${TIMEZONE:-America/New_York}
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - slack-bot
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
  n8n_data:

networks:
  default:
    name: second-story-network